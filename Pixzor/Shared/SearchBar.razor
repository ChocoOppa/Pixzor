@inject HttpClient httpClient

<style>
    form {
        display: flex;
        width: 100%;
    }

    .mud-shrink ~ label.mud-input-label.mud-input-label-inputcontrol {
        color: #000000;
    }

    .mud-input {
        color: #000000;
    }

    .mud-autocomplete {
        width: 100%;
    }

    .collection-btn .mud-button-label {
        position: absolute;
        top: 0;
    }

    @@media (max-width: 600px) {
        form {
            width: 100%;
        }
    }

</style>
<MudStack Row="true" Spacing="3" Style="width: 100%;">

    <MudSelect Class="mr-3" T="string" @bind-Value="searchType" Label="Select Search Type" AnchorOrigin="Origin.BottomCenter" Variant="Variant.Filled" Style="background-color: white;">
        <MudSelectItem Value=@("Photo") />
        <MudSelectItem Value=@("Video") />
    </MudSelect>
    <EditForm Model="search" OnValidSubmit="NavToSearch">
        <MudAutocomplete Class="rounded"
                         T="string"
                         @bind-Value="@searchText"
                         SearchFunc="SearchPhotos"
                         OnAdornmentClick="NavToSearch"
                         MaxItems="5"
                         Label="Search"
                         CoerceValue="true"
                         CoerceText="false"
                         ResetValueOnEmptyText="true"
                         Variant="Variant.Filled"
                         Adornment="Adornment.End"
                         AdornmentIcon="@Icons.Filled.Search"
                         AdornmentColor="Color.Primary"
                         Style="background: white;">

            <MoreItemsTemplate>
                <MudStack Spacing="3">
                    @if (recent.Count() > 0)
                    {
                        <MudStack Class="ma-3" Spacing="5">
                            <MudStack Justify="Justify.SpaceBetween" Row="true">
                                <MudText Typo="Typo.h5"><b>Recent Search@(recent.Count() > 1 ? "es" : "")</b></MudText>
                                <MudButton Variant="Variant.Text" OnClick="ClearRecent">
                                    <MudText Typo="Typo.h6"><i>Clear</i></MudText>
                                </MudButton>
                            </MudStack>
                            <MudStack Row="true" Spacing="5" Style="flex-wrap: wrap;">

                                @foreach (var item in recent)
                                {
                                    <MudButton Class="px-4 py-1" Size="Size.Large" Variant="Variant.Outlined" OnClick="() => PopularClick(item)">
                                        @item
                                    </MudButton>
                                }
                            </MudStack>
                        </MudStack>
                    }
                    @if (collectionMedias.Count > 0)
                    {
                        <MudStack Class="ma-3" Spacing="5">
                            <MudText Typo="Typo.h5"><b>Collections</b></MudText>
                            <MudStack Row="true" Spacing="5" Style="flex-wrap: wrap;">
                                @foreach (var item in collectionMedias)
                                {
                                    var collection = suggestCollection.Find(c => c.Id.Equals(item.Id));
                                    <MudButton Class="pa-0 collection-btn" Size="Size.Large" Variant="Variant.Outlined" OnClick="() => CollectionClick(item.Id)" Style="width: 120px; height: 180px; border: none; box-shadow: rgba(149, 157, 165, 0.2) 0px 8px 24px;">
                                        <MudGrid Spacing="0">

                                            <MudItem xs="12">
                                                @if (item.Media!.ElementAt(0).Type.Equals("Photo"))
                                                {
                                                    <MudImage Src="@item.Media!.ElementAt(0).Src!.Tiny" Width="120" />
                                                }
                                                else
                                                {
                                                    <MudImage Src="@item.Media!.ElementAt(0).Image" Width="120" />
                                                }
                                            </MudItem>


                                            <MudItem xs="6">
                                                @if (item.Media!.ElementAt(1).Type.Equals("Photo"))
                                                {
                                                    <MudImage Src="@item.Media!.ElementAt(1).Src!.Tiny" Width="60" />
                                                }
                                                else
                                                {
                                                    <MudImage Src="@item.Media!.ElementAt(1).Image" Width="60" />
                                                }
                                            </MudItem>

                                            <MudItem xs="6">
                                                @if (item.Media!.ElementAt(2).Type.Equals("Photo"))
                                                {
                                                    <MudImage Src="@item.Media!.ElementAt(2).Src!.Tiny" Width="60" />
                                                }
                                                else
                                                {
                                                    <MudImage Src="@item.Media!.ElementAt(2).Image" Width="60" />
                                                }
                                            </MudItem>

                                            <MudItem Class="d-flex justify-center align-center" xs="12" Style="height: 52.5px;">@collection!.Title</MudItem>
                                        </MudGrid>
                                    </MudButton>
                                }
                            </MudStack>
                        </MudStack>
                    }
                    <MudStack Class="ma-3" Spacing="5">
                        <MudText Typo="Typo.h5"><b>Popular Themes</b></MudText>
                        <MudStack Row="true" Spacing="5" Style="flex-wrap: wrap;">
                            @foreach (var item in popularThemes)
                            {
                                <MudButton Class="px-4 py-1" Size="Size.Large" Variant="Variant.Outlined" OnClick="() => PopularClick(item)">
                                    @item
                                </MudButton>
                            }
                        </MudStack>
                    </MudStack>
                </MudStack>
            </MoreItemsTemplate>


            <NoItemsTemplate>
                <MudStack Spacing="3">
                    @if (recent.Count() > 0)
                    {
                        <MudStack Class="ma-3" Spacing="5">
                            <MudStack Justify="Justify.SpaceBetween" Row="true">
                                <MudText Typo="Typo.h5"><b>Recent Search@(recent.Count() > 1 ? "es" : "")</b></MudText>
                                <MudButton Variant="Variant.Text" OnClick="ClearRecent">
                                    <MudText Typo="Typo.h6"><i>Clear</i></MudText>
                                </MudButton>
                            </MudStack>
                            <MudStack Row="true" Spacing="5" Style="flex-wrap: wrap;">

                                @foreach (var item in recent)
                                {
                                    <MudButton Class="px-4 py-1" Size="Size.Large" Variant="Variant.Outlined" OnClick="() => PopularClick(item)">
                                        @item
                                    </MudButton>
                                }
                            </MudStack>
                        </MudStack>
                    }
                    @if (collectionMedias.Count > 0)
                    {
                        <MudStack Class="ma-3" Spacing="5">
                            <MudText Typo="Typo.h5"><b>Collections</b></MudText>
                            <MudStack Row="true" Spacing="5" Style="flex-wrap: wrap;">
                                @foreach (var item in collectionMedias)
                                {
                                    var collection = suggestCollection.Find(c => c.Id.Equals(item.Id));
                                    <MudButton Class="pa-0 collection-btn" Size="Size.Large" Variant="Variant.Outlined" OnClick="() => CollectionClick(item.Id)" Style="width: 120px; height: 180px; border: none; box-shadow: rgba(149, 157, 165, 0.2) 0px 8px 24px;">
                                        <MudGrid Spacing="0">

                                            <MudItem xs="12">
                                                @if (item.Media!.ElementAt(0).Type.Equals("Photo"))
                                                {
                                                    <MudImage Src="@item.Media!.ElementAt(0).Src!.Tiny" Width="120" />
                                                }
                                                else
                                                {
                                                    <MudImage Src="@item.Media!.ElementAt(0).Image" Width="120" />
                                                }
                                            </MudItem>


                                            <MudItem xs="6">
                                                @if (item.Media!.ElementAt(1).Type.Equals("Photo"))
                                                {
                                                    <MudImage Src="@item.Media!.ElementAt(1).Src!.Tiny" Width="60" />
                                                }
                                                else
                                                {
                                                    <MudImage Src="@item.Media!.ElementAt(1).Image" Width="60" />
                                                }
                                            </MudItem>

                                            <MudItem xs="6">
                                                @if (item.Media!.ElementAt(2).Type.Equals("Photo"))
                                                {
                                                    <MudImage Src="@item.Media!.ElementAt(2).Src!.Tiny" Width="60" />
                                                }
                                                else
                                                {
                                                    <MudImage Src="@item.Media!.ElementAt(2).Image" Width="60" />
                                                }
                                            </MudItem>

                                            <MudItem Class="d-flex justify-center align-center" xs="12" Style="height: 52.5px;">@collection!.Title</MudItem>
                                        </MudGrid>
                                    </MudButton>
                                }
                            </MudStack>
                        </MudStack>
                    }
                    <MudStack Class="ma-3" Spacing="5">
                        <MudText Typo="Typo.h5"><b>Popular Themes</b></MudText>
                        <MudStack Row="true" Spacing="5" Style="flex-wrap: wrap;">
                            @foreach (var item in popularThemes)
                            {
                                <MudButton Class="px-4 py-1" Size="Size.Large" Variant="Variant.Outlined" OnClick="() => PopularClick(item)">
                                    @item
                                </MudButton>
                            }
                        </MudStack>
                    </MudStack>
                </MudStack>
            </NoItemsTemplate>
        </MudAutocomplete>
    </EditForm>
</MudStack>


@code {
    //EditForm
    private string search = string.Empty;
    private string searchType = "Photo";

    private List<string> suggestion = new();
    private List<string> recent = new();
    private List<Collection> suggestCollection = new();
    private readonly string[] popularThemes = new string[]
    {
        "Black and White", "Colour", "Texture",
        "Aerial", "Line", "Nature", "Pattern", "Macro",
        "Food", "Self Portraits", "Abstraction", "Street",
        "Night","People",
    };
    private CollectionPage collectionPage { get; set; } = new();
    public List<CollectionMedia> collectionMedias { get; set; } = new();

    protected override async Task OnParametersSetAsync()
    {
        await LoadSuggestion();
    }

    private async Task LoadSuggestion()
    {
        // Random words api form heroku
        if (suggestion.Count == 0)
        {
            var words = await httpClient.GetFromJsonAsync<string[]>("https://random-word-api.herokuapp.com/all");
            Array.Sort(words, (x, y) => x.Length - y.Length);
            suggestion.AddRange(words!);
        }

        var containRecent = await localStorage.ContainKeyAsync("recentSearch");
        if (containRecent) recent = await localStorage.GetItemAsync<List<string>>("recentSearch");

        //if (collectionPage.TotalResults == 0) collectionPage = await CollectionService.GetCollections();
        //suggestCollection = collectionPage.Collections!.Take(5).ToList();
        //await foreach (var item in CollectionService.GetCollectionMedias(suggestCollection))
        //{
        //    collectionMedias.Add(item);
        //}

    }



    private async Task ClearRecent()
    {
        await localStorage.RemoveItemAsync("recentSearch");
        recent.Clear();
    }

    // Search
    string searchText = string.Empty;

    private async Task NavToSearch()
    {
        if (string.IsNullOrWhiteSpace(searchText)) NavigationManager.NavigateTo("/");
        else
        {
            if (!recent.Contains(searchText)) recent.Add(searchText.Trim());
            await localStorage.SetItemAsync("recentSearch", recent);
            await localStorage.SetItemAsync("searchText", searchText.Trim());

            if (searchType.Equals("Photo")) NavigationManager.NavigateTo($"photo/search/{searchText}");
            else NavigationManager.NavigateTo($"video/search/{searchText}");
        }
    }

    private async Task PopularClick(string text)
    {
        if (!recent.Contains(text)) recent.Add(text);
        await localStorage.SetItemAsync("recentSearch", recent);
        await localStorage.SetItemAsync("searchText", text);

        if (searchType.Equals("Photo")) NavigationManager.NavigateTo($"photo/search/{text}");
        else NavigationManager.NavigateTo($"video/search/{text}");
    }

    private Task CollectionClick(string id)
    {
        return Task.CompletedTask;
    }

    private Task<IEnumerable<string>> SearchPhotos(string value)
    {
        // In real life use an asynchronous function for fetching data from an api.
        // if text is null or empty, don't return values (drop-down will not open)
        if (string.IsNullOrEmpty(value))
            return Task.FromResult(new List<string>().AsEnumerable());
        var suggestWords = suggestion.Where(x => x.StartsWith(value, StringComparison.InvariantCultureIgnoreCase)).Take(6);
        return Task.FromResult(suggestWords);
    }
}
