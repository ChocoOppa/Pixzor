@page "/"

<style>
    .home-search {
        display: flex;
        position: relative;
    }

    /* MudGrid */
    .mud-grid-spacing-xs-3 {
        width: 100%;
        margin: 0;
    }

    @@media (max-width: 768px) {
        .photo-container {
            padding: 0 12px !important;
        }
    }

</style>

<PageTitle>Pixzor - Home</PageTitle>

<MudContainer Class="d-flex flex-column ma-0 pa-0" MaxWidth="MaxWidth.False">
    <MudContainer Class="home-search" MaxWidth="MaxWidth.False">
        <MudImage Src="https://images.pexels.com/photos/1083822/pexels-photo-1083822.jpeg?auto=compress&cs=tinysrgb&w=1260&h=750&dpr=2"
                  Fluid="true"
                  ObjectFit="ObjectFit.Cover"
                  Style="height: 50vh; width: 100%"
                  />
        <MudContainer Class="d-flex flex-column gap-5" 
                      Style="position: absolute; top: 30%; left: 0; align-items: center;" 
                      MaxWidth="MaxWidth.False">
            <MudText Style="color: #fff" Typo="Typo.h4"><b><span style="color: #E3655B;">Pixzor</span> Home Page</b></MudText>

            <!-- SearchBar Component -->
            <SearchBar />
            
        </MudContainer>
    </MudContainer>
    <MudContainer Class="photo-container" MaxWidth="MaxWidth.False" Style="align-self: center; padding: 0 40px; margin-top: 30px;">
        <MudTabs Elevation="0" Rounded="true" ApplyEffectsToContainer="true" PanelClass="py-6" Centered="true" Color="Color.Surface">
            <MudTabPanel Text="Tab One" Style="padding: 0;">
                    <PhotoGrid photoPage="@photoPage" />
            </MudTabPanel>
            <MudTabPanel Text="Tab Two">
                <PhotoGrid />
            </MudTabPanel>
            <MudTabPanel Text="Tab Three">
                <MudText>Content Three</MudText>
            </MudTabPanel>
        </MudTabs>
    </MudContainer>
</MudContainer>

@code {
    //public EventCallback<Photo> OnScroll { get; set; }
    //public int totalPhotos { get; set; }

    //EditForm
    string search = string.Empty;

    private PhotoPage photoPage { get; set; } = new();
    private CollectionPage collectionPage { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
        await localStorage.RemoveItemAsync("searchText");
    }

    private async Task LoadData()
    {
        photoPage = await PhotoService.GetPhotos(1, 80);
        collectionPage = await CollectionService.GetCollections();

    }

    private record Word(string word, int number);

    // Search
    string searchText = string.Empty;

    private void NavToSearch()
    {
        if (string.IsNullOrWhiteSpace(searchText)) NavigationManager.NavigateTo("/");
        else 
        {
            NavigationManager.NavigateTo($"/search/{searchText}");
        }
    }
}
