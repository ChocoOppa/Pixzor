@inject HttpClient httpClient

<style>
    form {
        display: flex;
        width: 60%;
    }
</style>

<EditForm Model="search" OnValidSubmit="NavToSearch">
    <MudAutocomplete Class="rounded"
                     T="string"
                     @bind-Value="@searchText"
                     SearchFunc="SearchPhotos"
                     OnAdornmentClick="NavToSearch"
                     MaxItems=5
                     Label="Search"
                     CoerceValue="true"
                     ResetValueOnEmptyText="true"
                     Variant="Variant.Filled"
                     Adornment="Adornment.End"
                     AdornmentIcon="@Icons.Filled.Search"
                     AdornmentColor="Color.Primary"
                     Style="background-color: white;">

        <MoreItemsTemplate>
            <MudStack>
            <MudText>Recent Search@(recent.Count() > 1 ? "es" : "")</MudText>
            @if (recent.Count() > 0)
            {
                @foreach (var item in recent)
                {
                    <MudText Align="Align.Center" Class="px-4 py-1">
                        @item
                    </MudText>
                }
            }
            </MudStack>
            <MudStack>
                <MudText>Recent Search@(recent.Count() > 1 ? "es" : "")</MudText>
                @if (recent.Count() > 0)
                {
                    @foreach (var item in recent)
                    {
                        <MudText Align="Align.Center" Class="px-4 py-1">
                            @item
                        </MudText>
                    }
                }
            </MudStack>

        </MoreItemsTemplate>


        <NoItemsTemplate>
            @if (recent.Count() > 0)
            {
                @foreach (var item in recent)
                {
                    <MudText Align="Align.Center" Class="px-4 py-1">
                        @item
                    </MudText>
                }
            }
        </NoItemsTemplate>
    </MudAutocomplete>
</EditForm>

@code {
    //EditForm
    private string search = string.Empty;
    private List<string> recent = new();

    private List<string> suggestion = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadSuggestion();
    }

    private async Task LoadSuggestion()
    {
        // Random words api form heroku
        var words = await httpClient.GetFromJsonAsync<string[]>("https://random-word-api.herokuapp.com/all");
        suggestion.AddRange(words!);
        var containRecent = await localStorage.ContainKeyAsync("recentSearch");
        if (containRecent) recent = await localStorage.GetItemAsync<List<string>>("recentSearch");
        Console.WriteLine(recent.First());
    }

    // Search
    string searchText = string.Empty;

    private async Task NavToSearch()
    {
        if (string.IsNullOrWhiteSpace(searchText)) NavigationManager.NavigateTo("/");
        else
        {
            if (!recent.Contains(searchText)) recent.Add(searchText);
            await localStorage.SetItemAsync("recentSearch", recent);
            await localStorage.SetItemAsync("searchText", searchText);
            NavigationManager.NavigateTo($"/search/{searchText}");
        }
    }

    private async Task<IEnumerable<string>> SearchPhotos(string value)
    {
        // In real life use an asynchronous function for fetching data from an api.
        await Task.Delay(5);
        // if text is null or empty, don't return values (drop-down will not open)
        if (string.IsNullOrEmpty(value))
            return new string[0];
        return suggestion.Where(x => x.Contains(value, StringComparison.InvariantCultureIgnoreCase)).Take(6);
    }
}
